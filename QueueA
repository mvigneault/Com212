/*Program Three- Patrick Davis- 10/26/16*/

public class QueueA{
	
	//declare variables
	private Node[] q;
	private int f; //f for front 
	private int l; //l for length
	private int max;
	
	public QueueA(){
		max = 100;
		l= 0;
		f=0;
		q = new Node[100]; //create queueArray of size 100
	}
	
	//check if the queue is empty
	public boolean isEmpty(){
		return l==0;
	}
	
	//return the front of the queue (value in the array at index front)
	public Node front(){
		if (isEmpty()){
			return null;
		}
		else{
			return q[f];
		}
	}
	
	/*add the given node to the end of the queue.
	must use mod in order to keep the index values within the array*/
	public void enqueue(Node x){
		q[(f+l)%100] = x;
		l++;
	}
	
	/*remove the front node in the queue, if the queue is empty then return null*/
	public Node dequeue(){
		if (isEmpty()){
			return null;
		}
		int temp = f;
		f++;
		l--;
		return q[temp %100];
	}
	
	//print the length and all the values in the queue
	 public void printQueue() {
		int front = (f)%100;
		int tail = (f+l)%100;
		System.out.println(front);
		System.out.println(tail);
		if (front <= tail)
			for(int i = front; i < tail; i++) 
				System.out.println(q[i].getKey());
		else {
			for(int i = front; i < 100; i++) 
				System.out.println(q[i].getKey());          
			for(int i = 0; i < tail; i++) 
				System.out.println(q[i].getKey());
			} 	         
	}
}
