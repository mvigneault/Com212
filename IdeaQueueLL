/*This is the IdeaQueue class. 
 * This class was made by Kendra Bolt.
 * Revised by Mathieu & Patrick.
*/
import java.io.*;

public class IdeaQueueLL implements java.io.Serializable{
	
	//declare variables
	private IdeaNode f; //f for front
	private IdeaNode e; //e for end
	private int n;
	
	//constructor
	public IdeaQueueLL(){
		f= null;
		e= null;
		n=0;
	}
	
	//check if queue is empty, or if the front is null
	public boolean isEmpty(){
		return f==null;
	}
	
	//return the front of the queue
	public IdeaNode front(){
		return f;
		
	}
	
	/*add a given value to the end of the queue
	if the queue is empty, must set the front and end equal to the given node
	increment the length of the queue*/
	public void enqueue(IdeaNode x){
		if (isEmpty()) {
			f=x;
			e=x;
		}
		else{
			e.setNext(x);
			e = x;
		}
		n++;
	}
	
	/*remove the front value in the queue, decrement the length of the queue*/
	public IdeaNode dequeue(){
		IdeaNode temp = f;
		f = f.getNext();
		temp.setNext(null);
		n--;
		return temp;
	}
	
	//print the length and all the values in the queue
	public void printQueue() {
		//System.out.println(n);
		IdeaNode temp = f;
		while (temp != null) {
			System.out.println(temp.getIdea());
			temp = temp.getNext();
        }
    }
}
